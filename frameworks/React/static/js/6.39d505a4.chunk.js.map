{"version":3,"sources":["utils/Timer.js","components/MatSelect.jsx","components/DisplayTime.jsx","pages/JSONPlaceholder/components/DisplayTimesJSONPlaceholder.jsx","api/JSONPlaceholderApi.js","pages/JSONPlaceholder/components/PostList.jsx","pages/JSONPlaceholder/components/PostForm.jsx","pages/JSONPlaceholder/components/PostBtn.jsx","pages/JSONPlaceholder/JSONPlaceholderBenchmark.jsx"],"names":["Timer","timerName","startTime","endTime","timesList","rowsNumber","rowsNumberList","setRowsNumber","rowsCount","addRowsNumberBenchmark","startTimer","performance","now","stopTimer","totalTime","times","push","length","getAverageTime","find","item","averageTime","sum","reduce","a","b","clear","this","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","marginBottom","MatSelect","name","title","initialValue","selectDropdownList","handleChange","classes","variant","className","value","onChange","MenuProps","disableScrollLock","label","map","rows","index","displayTimeContainer","padding","textAlign","border","timeContainer","DisplayTime","timer","useState","open","setOpen","time","handleDialog","props","onClose","FormatNumber","color","badgeContent","onClick","TimeListDialog","TimeList","usePadding","DisplayTimesJSONPlaceholder","displayTimeList","addPostTimer","updatePostTimer","getPostTimer","deletePostTimer","getPostsWithCommentsTimer","renderTimer","displayTime","http","axios","create","baseURL","headers","post","put","id","get","delete","all","getPosts","getComments","then","spread","response","posts","data","comments","filter","comment","postId","PostItem","memo","body","Button","email","PostList","key","root","width","PostForm","onDialogClose","isEditing","selectedPost","values","setValues","errors","setErrors","validate","fieldValues","temp","handleInputValue","e","target","formValues","formIsValid","Object","every","x","useFormControls","formSubmitted","success","onSubmit","preventDefault","TextField","onBlur","error","helperText","multiline","type","useDialogStyles","PostFormDialog","Dialog","DialogTitle","PostBtn","cb","setSelectedPost","apiService","getPost","arrayOfIds","Array","from","_","i","JSONPlaceholderBenchmark","state","setTimersRowsNumber","createPost","setState","updatePost","getPostsWithComments","deletePost","window","location","reload","forEach","timers","excelService","saveTimersToExcel","handleRowsNumberChange","addPost","getSelectedPost","startIcon","saveTimesToExcel","Component"],"mappings":"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","file":"static/js/6.39d505a4.chunk.js","sourcesContent":["export default class Timer {\r\n  timerName = '';\r\n  startTime = 0;\r\n  endTime = 0;\r\n  timesList = {};\r\n  rowsNumber = 0;\r\n  rowsNumberList = [];\r\n\r\n  constructor(timerName) {\r\n    this.timerName = timerName;\r\n  }\r\n\r\n  setRowsNumber = (rowsCount) => {\r\n    this.rowsNumber = rowsCount;\r\n    this.addRowsNumberBenchmark(rowsCount);\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.startTime = performance.now();\r\n  }\r\n\r\n  stopTimer = () =>  {\r\n    if (this.startTime !== 0) {\r\n      this.endTime = performance.now();\r\n      const totalTime = this.endTime - this.startTime;\r\n      this.timesList[this.rowsNumber].times.push(totalTime);\r\n      this.timesList[this.rowsNumber].totalTime = totalTime;\r\n      if (this.timesList[this.rowsNumber].times.length > 2) {\r\n        this.getAverageTime();\r\n      }\r\n    }\r\n  }\r\n\r\n  addRowsNumberBenchmark = (rowsCount) => {\r\n    const exist = this.rowsNumberList.find(item => item === rowsCount);\r\n    if (!exist) {\r\n      this.rowsNumberList.push(rowsCount);\r\n      this.timesList[rowsCount] = { times: [], averageTime: 0, totalTime: 0};\r\n    }\r\n  }\r\n\r\n  getAverageTime = () =>  {\r\n    const times = this.timesList[this.rowsNumber].times;\r\n    const sum = times.reduce((a, b) => a + b);\r\n    this.timesList[this.rowsNumber].averageTime = (sum / times.length);\r\n    return this.timesList[this.rowsNumber].averageTime;\r\n  }\r\n\r\n  clear = () => {\r\n    this.startTime = 0;\r\n    this.endTime = 0;\r\n    this.timesList = {};\r\n  }\r\n}\r\n","import {FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 150,\r\n        marginBottom: \"20px\"\r\n    },\r\n}));\r\n\r\nexport const MatSelect = ({name, title, initialValue, selectDropdownList, handleChange}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n            <InputLabel>{title}</InputLabel>\r\n            <Select\r\n                name={name}\r\n                value={initialValue}\r\n                onChange={handleChange}\r\n                MenuProps={{\r\n                    disableScrollLock: true\r\n                }}\r\n                label={title}\r\n            >\r\n                {selectDropdownList.map((rows, index) =>\r\n                    <MenuItem key={index} value={rows}>{rows}</MenuItem>\r\n                )}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Badge, Dialog, DialogTitle, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {FormatNumber} from \"../utils/FormatNumber\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst useStyles = makeStyles({\r\n    displayTimeContainer: {\r\n        padding: \"0 10px\",\r\n        textAlign: \"center\",\r\n        border: \"2px solid black\",\r\n        margin: \"5px\"\r\n    },\r\n    timeContainer: {\r\n        marginBottom: \"15px\"\r\n    }\r\n});\r\n\r\nconst decimalPlaces = 5;\r\n\r\nexport const DisplayTime = ({title, timer}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const time = timer && (timer.timesList[timer.rowsNumber].averageTime > 0 ?\r\n        timer.timesList[timer.rowsNumber].averageTime :\r\n        timer.timesList[timer.rowsNumber].totalTime);\r\n\r\n    const handleDialog = (value) => {\r\n        setOpen(value);\r\n    };\r\n\r\n    const props = { onClose: handleDialog, open, timer, title }\r\n\r\n    return (\r\n        <div className={classes.displayTimeContainer}>\r\n            <div className={classes.timeContainer}>\r\n                <h3><strong>{title}</strong></h3>\r\n                {timer ? FormatNumber(time, decimalPlaces) : 0 } ms\r\n            </div>\r\n            <Badge color=\"secondary\" badgeContent={timer && timer.timesList[timer.rowsNumber].times.length}>\r\n                <IconButton variant=\"contained\" color=\"primary\" onClick={() => handleDialog(true)}>\r\n                    <ExpandMoreIcon/>\r\n                </IconButton>\r\n            </Badge>\r\n            <TimeListDialog {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TimeList = ({times}) => (\r\n    <List>\r\n        {times.map((time, index) => (\r\n            <ListItem key={index}>{ FormatNumber(time, decimalPlaces) } ms</ListItem>\r\n        ))}\r\n    </List>\r\n)\r\n\r\nconst usePadding = makeStyles({\r\n    padding: {\r\n        padding: \"0 15px 15px 15px\"\r\n    }\r\n})\r\n\r\nconst TimeListDialog = (props) => {\r\n    const { onClose, open, timer, title } = props;\r\n\r\n    const classes = usePadding();\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} open={open}>\r\n            <div className={`flex-column flex-center ${classes.padding}`}>\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <p><b>Average time: </b>{timer ? FormatNumber(timer.timesList[timer.rowsNumber].averageTime, decimalPlaces) : '0'} ms</p>\r\n                {\r\n                    timer ? <TimeList times={timer.timesList[timer.rowsNumber].times}/> : <p>No times to show.</p>\r\n                }\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n","import {DisplayTime} from \"../../../components/DisplayTime\";\r\nimport React from \"react\";\r\n\r\nconst DisplayTimesJSONPlaceholder = (props) => {\r\n    const displayTimeList = [\r\n        {\r\n            title: \"Adding post\",\r\n            timer: props.addPostTimer\r\n        },\r\n        {\r\n            title: \"Updating post\",\r\n            timer: props.updatePostTimer\r\n        },\r\n        {\r\n            title: 'Getting post',\r\n            timer: props.getPostTimer\r\n        },\r\n        {\r\n            title: \"Removing post\",\r\n            timer: props.deletePostTimer\r\n        },\r\n        {\r\n            title: \"Getting posts with comments\",\r\n            timer: props.getPostsWithCommentsTimer\r\n        },\r\n        {\r\n            title: \"Rendering 100 posts\",\r\n            timer: props.renderTimer\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {\r\n                displayTimeList.map((displayTime, index) =>\r\n                    <DisplayTime key={index} {...displayTime}/>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisplayTimesJSONPlaceholder;\r\n","import axios from \"axios\";\r\n\r\nconst http = axios.create({\r\n    baseURL: \"https://jsonplaceholder.typicode.com/\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\nclass JSONPlaceholderApi {\r\n    createPost(post) {\r\n        return http.post(\"posts\", post);\r\n    }\r\n\r\n    updatePost(post) {\r\n        return http.put(\"posts/\" + post.id, post);\r\n    }\r\n\r\n    getPost(id) {\r\n        return http.get(\"posts/\" + id);\r\n    }\r\n\r\n    deletePost(id) {\r\n        return http.delete(\"posts/\" + id);\r\n    }\r\n\r\n    getPosts() {\r\n        return http.get(\"posts\")\r\n    }\r\n\r\n    getComments() {\r\n        return http.get(\"comments\")\r\n    }\r\n\r\n    getPostsWithComments() {\r\n        return axios.all([this.getPosts(), this.getComments()]).then(axios.spread((...response) => {\r\n            const posts = response[0].data;\r\n            const comments = response[1].data;\r\n\r\n            posts.map(post => {\r\n                post.comments = comments.filter(comment => comment.postId === post.id);\r\n                return post;\r\n            });\r\n            return posts;\r\n        }));\r\n    }\r\n}\r\n\r\nexport default new JSONPlaceholderApi();\r\n","import React, {memo} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nconst PostItem = memo(({ title, body, comments }) => (\r\n    <tr>\r\n        <td>\r\n            <h2>{ title }</h2>\r\n            <div>\r\n                <Button>Edit post</Button>\r\n                <Button>Delete post</Button>\r\n            </div>\r\n        </td>\r\n        <td>{ body }</td>\r\n        <td className=\"comments-container\">\r\n            {\r\n                comments.map((comment, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <p>{ comment.email }</p>\r\n                            <h3>{ comment.body }</h3>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </td>\r\n    </tr>\r\n));\r\n\r\nconst PostList = memo(({posts}) => {\r\n    return (\r\n        <div className=\"data-table\">\r\n            <table>\r\n                <tbody>\r\n                    {posts.map((data, index) =>\r\n                        <PostItem {...data} key={index} />\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PostList;\r\n","import React, {useState} from \"react\";\r\nimport {Button, Dialog, DialogTitle, TextField} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useFormControls = (initialValue) => {\r\n    const [values, setValues] = useState(initialValue);\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n\r\n        if (\"title\" in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if (\"body\" in fieldValues) {\r\n            temp.body = fieldValues.body ? \"\" : \"This field is required.\"\r\n        }\r\n\r\n        setErrors({\r\n            ...temp\r\n        });\r\n    }\r\n    const handleInputValue = (e) => {\r\n        const { name, value } = e.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        });\r\n        validate({ [name]: value });\r\n    }\r\n    const formIsValid = (fieldValues = values) => {\r\n        validate();\r\n        return fieldValues.title &&\r\n            fieldValues.body &&\r\n            Object.values(errors).every((x) => x === \"\");\r\n    }\r\n    return {\r\n        handleInputValue,\r\n        formValues: values,\r\n        formIsValid,\r\n        errors\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: \"300px\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst PostForm = ({onDialogClose, isEditing, selectedPost}) => {\r\n    const classes = useStyles();\r\n    const initialFormValues = {\r\n        id: isEditing? selectedPost.id : null,\r\n        title: isEditing ? selectedPost.title : \"\",\r\n        body: isEditing ? selectedPost.body : \"\",\r\n        formSubmitted: false,\r\n        success: false\r\n    }\r\n\r\n    const { handleInputValue, formValues, errors, formIsValid} = useFormControls(initialFormValues);\r\n\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(formIsValid()) {\r\n            const post = {\r\n                id: isEditing ? formValues.id : 101,\r\n                title: formValues.title,\r\n                body: formValues.body\r\n            }\r\n            onDialogClose(post);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex-column flex-center\">\r\n            <form onSubmit={handleFormSubmit} className={'flex-column ' + classes.root}>\r\n                <TextField name=\"title\"\r\n                           value={formValues.title}\r\n                           variant=\"outlined\"\r\n                           onChange={handleInputValue}\r\n                           onBlur={handleInputValue}\r\n                           label=\"Title\"\r\n                           {...(errors[\"title\"] && { error: true, helperText: errors[\"title\"] })}/>\r\n                <TextField name=\"body\"\r\n                           value={formValues.body}\r\n                           variant=\"outlined\"\r\n                           multiline\r\n                           onChange={handleInputValue}\r\n                           onBlur={handleInputValue}\r\n                           label=\"Body\"\r\n                           rows=\"5\"\r\n                           {...(errors[\"body\"] && { error: true, helperText: errors[\"body\"] })}/>\r\n                <Button variant=\"contained\" type=\"submit\" color=\"primary\">Submit</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useDialogStyles = makeStyles({\r\n    padding: {\r\n        padding: \"0 15px 15px 15px\"\r\n    }\r\n})\r\n\r\nexport const PostFormDialog = (props) => {\r\n    const { onClose, open, isEditing, selectedPost } = props;\r\n\r\n    const classes = useDialogStyles();\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(null)}\r\n                open={open}>\r\n            <DialogTitle>{isEditing ? 'Edit post' : 'Add post'}</DialogTitle>\r\n            <div className={`flex-column flex-center ${classes.padding}`}>\r\n                <PostForm onDialogClose={(post) => onClose(post)} isEditing={isEditing} selectedPost={selectedPost}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {PostFormDialog} from \"./PostForm\";\r\nimport apiService from '../../../api/JSONPlaceholderApi';\r\n\r\nexport const PostBtn = ({cb, isEditing = false, postId}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedPost, setSelectedPost] = useState({});\r\n\r\n    const handleDialogOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDialogClose = (post) => {\r\n        setOpen(false);\r\n        if (post) {\r\n            cb(post);\r\n        }\r\n    }\r\n\r\n    const getPost = () => {\r\n        apiService.getPost(postId).then(post => {\r\n            setSelectedPost(post.data);\r\n            setOpen(true);\r\n        });\r\n    }\r\n\r\n    const props = { onClose: handleDialogClose, open, isEditing, selectedPost}\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className=\"ButtonMargin\"\r\n                    onClick={isEditing ? getPost : handleDialogOpen}>\r\n                {isEditing ? 'Edit post' : 'Add post'}\r\n            </Button>\r\n            <PostFormDialog {...props} />\r\n        </>\r\n    )\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Timer from \"../../utils/Timer\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport \"./JSONPlaceholder.css\";\r\nimport {MatSelect} from \"../../components/MatSelect\";\r\nimport DisplayTimesJSONPlaceholder from \"./components/DisplayTimesJSONPlaceholder\";\r\nimport apiService from '../../api/JSONPlaceholderApi';\r\nimport PostList from \"./components/PostList\";\r\nimport {PostBtn} from \"./components/PostBtn\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport excelService from \"../../utils/ExcelService\";\r\n\r\nconst arrayOfIds = Array.from({length: 100}, (_, i) => i + 1);\r\n\r\nexport default class JSONPlaceholderBenchmark extends Component {\r\n    addPostTimer = new Timer('addPostTimer');\r\n    updatePostTimer = new Timer('updatePostTimer');\r\n    getPostTimer = new Timer('getPostTimer');\r\n    getPostsWithCommentsTimer = new Timer('getPostsWithCommentsTimer');\r\n    deletePostTimer = new Timer('deletePostTimer');\r\n    renderTimer = new Timer('renderTimer');\r\n\r\n    state = {\r\n        posts: [],\r\n        selectedPost: null,\r\n        postId: 1,\r\n        addPostTimer: null,\r\n        updatePostTimer: null,\r\n        getPostTimer: null,\r\n        getPostsWithCommentsTimer: null,\r\n        deletePostTimer: null,\r\n        renderTimer: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setTimersRowsNumber(0);\r\n    }\r\n\r\n    addPost(post) {\r\n        this.addPostTimer.startTimer();\r\n        apiService.createPost(post).then(() => {\r\n            this.addPostTimer.stopTimer();\r\n            this.setState({addPostTimer: this.addPostTimer});\r\n        });\r\n    }\r\n\r\n    updatePost(post) {\r\n        this.updatePostTimer.startTimer();\r\n        apiService.updatePost(post).then(() => {\r\n            this.updatePostTimer.stopTimer();\r\n            this.setState({updatePostTimer: this.updatePostTimer});\r\n        });\r\n    }\r\n\r\n    getSelectedPost() {\r\n        this.getPostTimer.startTimer();\r\n        apiService.getPost(this.state.postId).then(post => {\r\n            this.getPostTimer.stopTimer();\r\n            this.setState({selectedPost: post.data, getPostTimer: this.getPostTimer});\r\n        });\r\n    }\r\n\r\n    getPostsWithComments() {\r\n        this.setState({ posts: []}, () => {\r\n            this.getPostsWithCommentsTimer.startTimer();\r\n            apiService.getPostsWithComments().then(data => {\r\n                this.getPostsWithCommentsTimer.stopTimer();\r\n                this.renderTimer.startTimer();\r\n                this.setState({posts: data, getPostsWithCommentsTimer: this.getPostsWithCommentsTimer}, () => {\r\n                    this.renderTimer.stopTimer();\r\n                    this.setState({renderTimer: this.renderTimer});\r\n                });\r\n            })\r\n        })\r\n    }\r\n\r\n    deletePost() {\r\n        this.deletePostTimer.startTimer();\r\n        apiService.deletePost(this.state.postId).then(() => {\r\n            this.deletePostTimer.stopTimer();\r\n            this.setState({deletePostTimer: this.deletePostTimer});\r\n        });\r\n    }\r\n\r\n    handleRowsNumberChange(postId) {\r\n        this.setState({postId});\r\n    }\r\n\r\n    clear() {\r\n        window.location.reload();\r\n    }\r\n\r\n    setTimersRowsNumber(rowsNumber) {\r\n        const timers = [this.addPostTimer, this.updatePostTimer, this.renderTimer, this.deletePostTimer,\r\n            this.getPostTimer, this.getPostsWithCommentsTimer];\r\n\r\n        timers.forEach(timer => {\r\n            timer.setRowsNumber(rowsNumber);\r\n        })\r\n    }\r\n\r\n    saveTimesToExcel() {\r\n        const timers = [this.addPostTimer, this.updatePostTimer, this.renderTimer, this.deletePostTimer,\r\n            this.getPostTimer, this.getPostsWithCommentsTimer];\r\n\r\n        excelService.saveTimersToExcel(timers, \"JSON-PLACEHOLDER-REACT\");\r\n    }\r\n\r\n    render() {\r\n        const selectedPost = this.state.selectedPost;\r\n        return (\r\n            <div className=\"json-placeholder-container\">\r\n                <div className=\"actions\">\r\n                    <div>\r\n                        <MatSelect name=\"postId\" title=\"Choose post id\"\r\n                                   initialValue={this.state.postId}\r\n                                   handleChange={(e) => this.handleRowsNumberChange(e.target.value)}\r\n                                   selectDropdownList={arrayOfIds}/>\r\n                    </div>\r\n                    <div className=\"flex-row operations\">\r\n                        <PostBtn cb={(post) => this.addPost(post)}/>\r\n                        <PostBtn cb={(post) => this.updatePost(post)} isEditing postId={this.state.postId}/>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.getSelectedPost()}>Get post</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.deletePost()}>Delete post</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.getPostsWithComments()}>Get 100 posts with 500 comments</Button>\r\n                        <Button variant=\"contained\" color=\"primary\"\r\n                                onClick={() => this.clear()}>Clear</Button>\r\n                        <Button variant=\"contained\" color=\"default\" startIcon={<GetAppIcon />}\r\n                                onClick={() => this.saveTimesToExcel()}>\r\n                            Save times to excel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"result-container\">\r\n                    <DisplayTimesJSONPlaceholder {...this.state}/>\r\n                </div>\r\n                <div>\r\n                    {selectedPost &&\r\n                    <p><b>Selected post:</b> {selectedPost.id} | {selectedPost.title} | {selectedPost.body}</p>}\r\n                </div>\r\n                <PostList posts={this.state.posts}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}