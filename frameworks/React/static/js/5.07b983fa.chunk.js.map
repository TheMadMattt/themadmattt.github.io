{"version":3,"sources":["utils/Timer.js","components/MatSelect.jsx","components/DisplayTime.jsx","../node_modules/@material-ui/icons/Done.js","../node_modules/@material-ui/icons/Clear.js","utils/DummyDataService.js","pages/LifecycleHooks/components/DummyDataList.jsx","pages/LifecycleHooks/components/DisplayTimesLifecycle.jsx","pages/LifecycleHooks/LifecycleHooksBenchmark.jsx"],"names":["Timer","timerName","startTime","endTime","timesList","rowsNumber","rowsNumberList","setRowsNumber","rowsCount","addRowsNumberBenchmark","startTimer","performance","now","stopTimer","totalTime","times","push","length","getAverageTime","find","item","averageTime","sum","reduce","a","b","clear","this","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","marginBottom","MatSelect","name","title","initialValue","selectDropdownList","handleChange","classes","variant","className","value","onChange","MenuProps","disableScrollLock","label","map","rows","index","displayTimeContainer","padding","textAlign","border","timeContainer","DisplayTime","timer","useState","open","setOpen","time","handleDialog","props","onClose","FormatNumber","color","badgeContent","onClick","TimeListDialog","TimeList","usePadding","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","React","_default","createElement","d","adjectives","colors","nouns","random","max","Math","round","buildData","count","Array","fill","_","buildOneItem","id","description","completed","DummyDataItem","memo","DummyDataList","dummyData","data","key","DisplayTimesLifecycle","displayTimeList","createTimer","updateAllTimer","appendTimer","swapTimer","removeAllTimer","selectRandomTimer","updateRandomTimer","removeRandomTimer","displayTime","LifecycleHooksBenchmark","state","selectedDummyData","setTimersRowsNumber","setState","newData","slice","i","r","prevState","concat","selected","selectedDummyItem","window","location","reload","forEach","timers","excelService","saveTimersToExcel","selectedItem","e","handleRowsNumberChange","target","Button","createRows","updateAllRows","appendRows","swapRows","removeAllRows","selectRandomRow","disabled","updateRandomRow","removeRandomRow","startIcon","saveTimesToExcel","Component"],"mappings":"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","file":"static/js/5.07b983fa.chunk.js","sourcesContent":["export default class Timer {\r\n  timerName = '';\r\n  startTime = 0;\r\n  endTime = 0;\r\n  timesList = {};\r\n  rowsNumber = 0;\r\n  rowsNumberList = [];\r\n\r\n  constructor(timerName) {\r\n    this.timerName = timerName;\r\n  }\r\n\r\n  setRowsNumber = (rowsCount) => {\r\n    this.rowsNumber = rowsCount;\r\n    this.addRowsNumberBenchmark(rowsCount);\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.startTime = performance.now();\r\n  }\r\n\r\n  stopTimer = () =>  {\r\n    if (this.startTime !== 0) {\r\n      this.endTime = performance.now();\r\n      const totalTime = this.endTime - this.startTime;\r\n      this.timesList[this.rowsNumber].times.push(totalTime);\r\n      this.timesList[this.rowsNumber].totalTime = totalTime;\r\n      if (this.timesList[this.rowsNumber].times.length > 2) {\r\n        this.getAverageTime();\r\n      }\r\n    }\r\n  }\r\n\r\n  addRowsNumberBenchmark = (rowsCount) => {\r\n    const exist = this.rowsNumberList.find(item => item === rowsCount);\r\n    if (!exist) {\r\n      this.rowsNumberList.push(rowsCount);\r\n      this.timesList[rowsCount] = { times: [], averageTime: 0, totalTime: 0};\r\n    }\r\n  }\r\n\r\n  getAverageTime = () =>  {\r\n    const times = this.timesList[this.rowsNumber].times;\r\n    const sum = times.reduce((a, b) => a + b);\r\n    this.timesList[this.rowsNumber].averageTime = (sum / times.length);\r\n    return this.timesList[this.rowsNumber].averageTime;\r\n  }\r\n\r\n  clear = () => {\r\n    this.startTime = 0;\r\n    this.endTime = 0;\r\n    this.timesList = {};\r\n  }\r\n}\r\n","import {FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 150,\r\n        marginBottom: \"20px\"\r\n    },\r\n}));\r\n\r\nexport const MatSelect = ({name, title, initialValue, selectDropdownList, handleChange}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n            <InputLabel>{title}</InputLabel>\r\n            <Select\r\n                name={name}\r\n                value={initialValue}\r\n                onChange={handleChange}\r\n                MenuProps={{\r\n                    disableScrollLock: true\r\n                }}\r\n                label={title}\r\n            >\r\n                {selectDropdownList.map((rows, index) =>\r\n                    <MenuItem key={index} value={rows}>{rows}</MenuItem>\r\n                )}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Badge, Dialog, DialogTitle, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {FormatNumber} from \"../utils/FormatNumber\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst useStyles = makeStyles({\r\n    displayTimeContainer: {\r\n        padding: \"0 10px\",\r\n        textAlign: \"center\",\r\n        border: \"2px solid black\",\r\n        margin: \"5px\"\r\n    },\r\n    timeContainer: {\r\n        marginBottom: \"15px\"\r\n    }\r\n});\r\n\r\nconst decimalPlaces = 5;\r\n\r\nexport const DisplayTime = ({title, timer}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const time = timer && (timer.timesList[timer.rowsNumber].averageTime > 0 ?\r\n        timer.timesList[timer.rowsNumber].averageTime :\r\n        timer.timesList[timer.rowsNumber].totalTime);\r\n\r\n    const handleDialog = (value) => {\r\n        setOpen(value);\r\n    };\r\n\r\n    const props = { onClose: handleDialog, open, timer, title }\r\n\r\n    return (\r\n        <div className={classes.displayTimeContainer}>\r\n            <div className={classes.timeContainer}>\r\n                <h3><strong>{title}</strong></h3>\r\n                {timer ? FormatNumber(time, decimalPlaces) : 0 } ms\r\n            </div>\r\n            <Badge color=\"secondary\" badgeContent={timer && timer.timesList[timer.rowsNumber].times.length}>\r\n                <IconButton variant=\"contained\" color=\"primary\" onClick={() => handleDialog(true)}>\r\n                    <ExpandMoreIcon/>\r\n                </IconButton>\r\n            </Badge>\r\n            <TimeListDialog {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TimeList = ({times}) => (\r\n    <List>\r\n        {times.map((time, index) => (\r\n            <ListItem key={index}>{ FormatNumber(time, decimalPlaces) } ms</ListItem>\r\n        ))}\r\n    </List>\r\n)\r\n\r\nconst usePadding = makeStyles({\r\n    padding: {\r\n        padding: \"0 15px 15px 15px\"\r\n    }\r\n})\r\n\r\nconst TimeListDialog = (props) => {\r\n    const { onClose, open, timer, title } = props;\r\n\r\n    const classes = usePadding();\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} open={open}>\r\n            <div className={`flex-column flex-center ${classes.padding}`}>\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <p><b>Average time: </b>{timer ? FormatNumber(timer.timesList[timer.rowsNumber].averageTime, decimalPlaces) : '0'} ms</p>\r\n                {\r\n                    timer ? <TimeList times={timer.timesList[timer.rowsNumber].times}/> : <p>No times to show.</p>\r\n                }\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"\n}), 'Done');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","const adjectives = [\r\n  'bad', 'best', 'better', 'big', 'certain', 'clear', 'different', 'early', 'easy', 'economic', 'federal', 'free',\r\n  'full', 'good', 'great', 'hard', 'high', 'human', 'important', 'international', 'large', 'late', 'little', 'local',\r\n  'long', 'low', 'major', 'military', 'national', 'new', 'old', 'only', 'other', 'political', 'possible', 'public',\r\n  'real', 'recent', 'right', 'small', 'social', 'special', 'strong', 'sure', 'true', 'white', 'whole', 'young',\r\n  'crazy', 'helpful', 'mushy'\r\n];\r\n\r\nconst colors = [\r\n  'red', 'yellow', 'blue', 'green', 'pink', 'brown', 'purple', 'brown', 'white', 'black', 'orange'\r\n];\r\n\r\nconst nouns = [\r\n  'area', 'book', 'business', 'case', 'child', 'company', 'country', 'day', 'eye', 'fact', 'family', 'government',\r\n  'group', 'hand', 'home', 'job', 'life', 'lot', 'man', 'money', 'month', 'mother', 'Mr', 'night', 'number', 'part',\r\n  'people', 'place', 'point', 'problem', 'program', 'question', 'right', 'room', 'school', 'state', 'story',\r\n  'student', 'study', 'system', 'thing', 'time', 'water', 'way', 'week', 'woman', 'word', 'work', 'world', 'year'\r\n];\r\n\r\nexport const random = (max) => {\r\n  return Math.round(Math.random() * 1000) % max;\r\n}\r\n\r\nexport const buildData = (count) => {\r\n  return Array(count).fill(1).map((_, index) => {\r\n    return buildOneItem(index);\r\n  });\r\n}\r\n\r\nexport const buildOneItem = (id) => {\r\n  const title = nouns[random(nouns.length)];\r\n  const desc = `${adjectives[random(adjectives.length)]} ${colors[random(colors.length)]} ${nouns[random(nouns.length)]}`\r\n  const completed = false;\r\n  return {\r\n    id,\r\n    title,\r\n    description: desc,\r\n    completed\r\n  }\r\n}\r\n","import React, {memo} from 'react';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst DummyDataItem = memo(({ id, title, description, completed }) => (\r\n        <tr>\r\n            <td>{ id }</td>\r\n            <td>{ title }</td>\r\n            <td>{ description }</td>\r\n            <td>{ completed ? <DoneIcon/> : <ClearIcon/> }</td>\r\n        </tr>\r\n));\r\n\r\nconst DummyDataList = memo(({dummyData}) => {\r\n    return (\r\n        <div className=\"data-table\">\r\n            <table>\r\n                <tbody>\r\n                {dummyData.map((data, index) =>\r\n                    <DummyDataItem {...data} key={index} />\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default DummyDataList;\r\n","import {DisplayTime} from \"../../../components/DisplayTime\";\r\nimport React from \"react\";\r\n\r\nconst DisplayTimesLifecycle = (props) => {\r\n    const displayTimeList = [\r\n        {\r\n            title: \"Creating \" + props.rowsNumber + \" rows\",\r\n            timer: props.createTimer\r\n        },\r\n        {\r\n            title: \"Update \" + props.rowsNumber + \" rows\",\r\n            timer: props.updateAllTimer\r\n        },\r\n        {\r\n            title: \"Appending 1000 rows\",\r\n            timer: props.appendTimer\r\n        },\r\n        {\r\n            title: \"Swapping first and last row\",\r\n            timer: props.swapTimer\r\n        },\r\n        {\r\n            title: \"Removing \" + props.rowsNumber + \" rows\",\r\n            timer: props.removeAllTimer\r\n        },\r\n        {\r\n            title: \"Selecting random row\",\r\n            timer: props.selectRandomTimer\r\n        },\r\n        {\r\n            title: \"Updating random row\",\r\n            timer: props.updateRandomTimer\r\n        },\r\n        {\r\n            title: \"Removing random row\",\r\n            timer: props.removeRandomTimer\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {\r\n                displayTimeList.map((displayTime, index) =>\r\n                    <DisplayTime key={index} {...displayTime}/>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisplayTimesLifecycle;\r\n","import React, {Component} from \"react\";\r\nimport Timer from \"../../utils/Timer\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {buildData, random} from \"../../utils/DummyDataService\";\r\nimport \"./LifecycleHooks.css\";\r\nimport DummyDataList from \"./components/DummyDataList\";\r\nimport {MatSelect} from \"../../components/MatSelect\";\r\nimport DisplayTimesLifecycle from \"./components/DisplayTimesLifecycle\";\r\nimport excelService from \"../../utils/ExcelService\";\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nconst rowsNumberList = [1000, 2000, 5000, 10000];\r\n\r\nexport default class LifecycleHooksBenchmark extends Component {\r\n    createTimer = new Timer('createTimer');\r\n    updateAllTimer = new Timer('updateAllTimer')\r\n    appendTimer = new Timer('appendTimer');\r\n    removeAllTimer = new Timer('removeAllTimer');\r\n    selectRandomTimer = new Timer('selectRandomTimer');\r\n    updateRandomTimer = new Timer('updateRandomTimer');\r\n    removeRandomTimer = new Timer('removeRandomTimer');\r\n    swapTimer = new Timer('swapTimer');\r\n\r\n    state = {\r\n        dummyData: [],\r\n        selectedDummyData: null,\r\n        rowsNumber: 1000,\r\n        createTimer: null,\r\n        appendTimer: null,\r\n        removeAllTimer: null,\r\n        updateAllTimer: null,\r\n        selectRandomTimer: null,\r\n        updateRandomTimer: null,\r\n        removeRandomTimer: null,\r\n        swapTimer: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setTimersRowsNumber(this.state.rowsNumber);\r\n    }\r\n\r\n    createRows() {\r\n        this.setState({dummyData: []}, () => {\r\n            this.createTimer.startTimer();\r\n            this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n                this.createTimer.stopTimer();\r\n                this.setState({createTimer: this.createTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    updateAllRows() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            this.updateAllTimer.startTimer();\r\n            const newData = this.state.dummyData.slice(0);\r\n\r\n            for (let i = 0; i < newData.length; i++) {\r\n                const r = newData[i];\r\n\r\n                newData[i] = {\r\n                    id: r.id,\r\n                    title: r.title + \" UPDATED\",\r\n                    description: r.description + \" UPDATED\",\r\n                    completed: !r.completed\r\n                };\r\n            }\r\n            this.setState({dummyData: newData}, () => {\r\n                this.updateAllTimer.stopTimer();\r\n                this.setState({updateAllTimer: this.updateAllTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    appendRows() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            this.appendTimer.startTimer();\r\n            this.setState(prevState => ({\r\n                dummyData: prevState.dummyData.concat(buildData(1000))\r\n            }), () => {\r\n                this.appendTimer.stopTimer();\r\n                this.setState({appendTimer: this.appendTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    swapRows() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            this.swapTimer.startTimer();\r\n            const dummyData = this.state.dummyData;\r\n            this.setState({ dummyData: [dummyData[dummyData.length-1], ...dummyData.slice(1, dummyData.length-1),\r\n                    dummyData[0]] }, () => {\r\n                this.swapTimer.stopTimer();\r\n                this.setState({swapTimer: this.swapTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    removeAllRows() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            this.removeAllTimer.startTimer();\r\n            this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n                this.removeAllTimer.stopTimer();\r\n                this.setState({removeAllTimer: this.removeAllTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    selectRandomRow() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            const data = this.state.dummyData\r\n            this.selectRandomTimer.startTimer();\r\n            const id = random(data.length);\r\n            const selected = data[id];\r\n            this.setState({selectedDummyData: selected}, () => {\r\n                this.selectRandomTimer.stopTimer();\r\n                this.setState({selectRandomTimer: this.selectRandomTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    updateRandomRow() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            let data = this.state.dummyData\r\n            this.updateRandomTimer.startTimer();\r\n            const id = random(data.length);\r\n            const selectedDummyItem = data[id];\r\n            selectedDummyItem.title += \" UPDATED\";\r\n            selectedDummyItem.description += \" UPDATED\";\r\n\r\n            data[id] = selectedDummyItem;\r\n\r\n            this.setState({dummyData: data}, () => {\r\n                this.updateRandomTimer.stopTimer();\r\n                this.setState({updateRandomTimer: this.updateRandomTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    removeRandomRow() {\r\n        this.setState({dummyData: buildData(this.state.rowsNumber)}, () => {\r\n            const data = this.state.dummyData\r\n            this.removeRandomTimer.startTimer();\r\n            const id = random(data.length);\r\n\r\n\r\n            this.setState({ dummyData: [...data.slice(0, id), ...data.slice(id + 1)] }, () => {\r\n                this.removeRandomTimer.stopTimer();\r\n                this.setState({removeRandomTimer: this.removeRandomTimer});\r\n            });\r\n        });\r\n    }\r\n\r\n    handleRowsNumberChange(rowsNumber) {\r\n        this.setTimersRowsNumber(rowsNumber);\r\n        this.setState({rowsNumber});\r\n    }\r\n\r\n    clear() {\r\n        window.location.reload();\r\n    }\r\n\r\n    setTimersRowsNumber(rowsNumber) {\r\n        const timers = [this.createTimer, this.updateAllTimer, this.appendTimer, this.removeAllTimer,\r\n            this.selectRandomTimer, this.removeRandomTimer, this.updateRandomTimer, this.swapTimer];\r\n\r\n        timers.forEach(timer => {\r\n            timer.setRowsNumber(rowsNumber);\r\n        })\r\n    }\r\n\r\n    saveTimesToExcel() {\r\n        const timers = [this.createTimer, this.updateAllTimer, this.appendTimer, this.removeAllTimer,\r\n            this.selectRandomTimer, this.removeRandomTimer, this.updateRandomTimer, this.swapTimer];\r\n\r\n        excelService.saveTimersToExcel(timers, \"LIFECYCLE-HOOKS-REACT\");\r\n    }\r\n\r\n    render() {\r\n        const selectedItem = this.state.selectedDummyData;\r\n        return (\r\n            <div>\r\n                <div className=\"actions\">\r\n                    <div>\r\n                        <MatSelect name=\"rowNumber\" title=\"Row number\"\r\n                                   initialValue={this.state.rowsNumber}\r\n                                   handleChange={(e) => this.handleRowsNumberChange(e.target.value)}\r\n                                   selectDropdownList={rowsNumberList}/>\r\n                    </div>\r\n                    <div className=\"flex-row operations\">\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.createRows()}>Create {this.state.rowsNumber} rows</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.updateAllRows()}>Update {this.state.rowsNumber} rows</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.appendRows()}>Append 1000 rows</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.swapRows()}>Swap first and last row</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.removeAllRows()}>Remove all rows</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.selectRandomRow()}\r\n                                disabled={this.state.dummyData.length <= 0}>Select random row</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.updateRandomRow()}\r\n                                disabled={this.state.dummyData.length <= 0}>Update random row</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.removeRandomRow()}\r\n                                disabled={this.state.dummyData.length <= 0}>Remove random row</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"ButtonMargin\"\r\n                                onClick={() => this.clear()}>Clear</Button>\r\n                        <Button variant=\"contained\" color=\"default\" startIcon={<GetAppIcon />}\r\n                                onClick={() => this.saveTimesToExcel()}>\r\n                            Save times to excel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"result-container\">\r\n                    <DisplayTimesLifecycle {...this.state}/>\r\n                </div>\r\n                <div>\r\n                    {selectedItem &&\r\n                    <p><b>Selected item:</b> {selectedItem.id} | {selectedItem.title} | {selectedItem.description}</p>}\r\n                </div>\r\n                <DummyDataList dummyData={this.state.dummyData}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}